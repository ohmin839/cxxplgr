#define BOOST_TEST_MODULE test_without_breath

#include <string>

#include <boost/test/included/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#include "cxxplgr/secondary.hpp"

typedef std::pair<std::string, std::string> fixture_t;
const fixture_t fixtures[] =
{
    {"ἁ", "α"},
    {"ἀ", "α"},
    {"ᾁ", "ᾳ"},
    {"ᾀ", "ᾳ"},
    {"ἅ", "ά"},
    {"ἄ", "ά"},
    {"ᾅ", "ᾴ"},
    {"ᾄ", "ᾴ"},
    {"ἃ", "ὰ"},
    {"ἂ", "ὰ"},
    {"ᾃ", "ᾲ"},
    {"ᾂ", "ᾲ"},
    {"ἇ", "ᾶ"},
    {"ἆ", "ᾶ"},
    {"ᾇ", "ᾷ"},
    {"ᾆ", "ᾷ"},
    {"ἑ", "ε"},
    {"ἐ", "ε"},
    {"ἕ", "έ"},
    {"ἔ", "έ"},
    {"ἓ", "ὲ"},
    {"ἒ", "ὲ"},
    {"ἡ", "η"},
    {"ἠ", "η"},
    {"ᾑ", "ῃ"},
    {"ᾐ", "ῃ"},
    {"ἥ", "ή"},
    {"ἤ", "ή"},
    {"ᾕ", "ῄ"},
    {"ᾔ", "ῄ"},
    {"ἣ", "ὴ"},
    {"ἢ", "ὴ"},
    {"ᾓ", "ῂ"},
    {"ᾒ", "ῂ"},
    {"ἧ", "ῆ"},
    {"ἦ", "ῆ"},
    {"ᾗ", "ῇ"},
    {"ᾖ", "ῇ"},
    {"ἱ", "ι"},
    {"ἰ", "ι"},
    {"ἵ", "ί"},
    {"ἴ", "ί"},
    {"ἳ", "ὶ"},
    {"ἲ", "ὶ"},
    {"ἷ", "ῖ"},
    {"ἶ", "ῖ"},
    {"ὁ", "ο"},
    {"ὀ", "ο"},
    {"ὅ", "ό"},
    {"ὄ", "ό"},
    {"ὃ", "ὸ"},
    {"ὂ", "ὸ"},
    {"ῥ", "ρ"},
    {"ῤ", "ρ"},
    {"ὑ", "υ"},
    {"ὐ", "υ"},
    {"ὕ", "ύ"},
    {"ὔ", "ύ"},
    {"ὓ", "ὺ"},
    {"ὒ", "ὺ"},
    {"ὗ", "ῦ"},
    {"ὖ", "ῦ"},
    {"ὡ", "ω"},
    {"ὠ", "ω"},
    {"ᾡ", "ῳ"},
    {"ᾠ", "ῳ"},
    {"ὥ", "ώ"},
    {"ὤ", "ώ"},
    {"ᾥ", "ῴ"},
    {"ᾤ", "ῴ"},
    {"ὣ", "ὼ"},
    {"ὢ", "ὼ"},
    {"ᾣ", "ῲ"},
    {"ᾢ", "ῲ"},
    {"ὧ", "ῶ"},
    {"ὦ", "ῶ"},
    {"ᾧ", "ῷ"},
    {"ᾦ", "ῷ"},
    {"Ἁ", "Α"},
    {"Ἀ", "Α"},
    {"ᾉ", "ᾼ"},
    {"ᾈ", "ᾼ"},
    {"Ἅ", "Ά"},
    {"Ἄ", "Ά"},
    {"ᾍ", "ᾼ"},
    {"ᾌ", "ᾼ"},
    {"Ἃ", "Ὰ"},
    {"Ἂ", "Ὰ"},
    {"ᾋ", "ᾼ"},
    {"ᾊ", "ᾼ"},
    {"Ἇ", "Α"},
    {"Ἆ", "Α"},
    {"ᾏ", "ᾼ"},
    {"ᾎ", "ᾼ"},
    {"Ἑ", "Ε"},
    {"Ἐ", "Ε"},
    {"Ἕ", "Έ"},
    {"Ἔ", "Έ"},
    {"Ἓ", "Ὲ"},
    {"Ἒ", "Ὲ"},
    {"Ἡ", "Η"},
    {"Ἠ", "Η"},
    {"ᾙ", "ῌ"},
    {"ᾘ", "ῌ"},
    {"Ἥ", "Ή"},
    {"Ἤ", "Ή"},
    {"ᾝ", "ῌ"},
    {"ᾜ", "ῌ"},
    {"Ἣ", "Ὴ"},
    {"Ἢ", "Ὴ"},
    {"ᾛ", "ῌ"},
    {"ᾚ", "ῌ"},
    {"Ἧ", "Η"},
    {"Ἦ", "Η"},
    {"ᾟ", "ῌ"},
    {"ᾞ", "ῌ"},
    {"Ἱ", "Ι"},
    {"Ἰ", "Ι"},
    {"Ἵ", "Ί"},
    {"Ἴ", "Ί"},
    {"Ἳ", "Ὶ"},
    {"Ἲ", "Ὶ"},
    {"Ἷ", "Ι"},
    {"Ἶ", "Ι"},
    {"Ὁ", "Ο"},
    {"Ὀ", "Ο"},
    {"Ὅ", "Ό"},
    {"Ὄ", "Ό"},
    {"Ὃ", "Ὸ"},
    {"Ὂ", "Ὸ"},
    {"Ῥ", "Ρ"},
    {"Ὑ", "Υ"},
    {"Ὕ", "Ύ"},
    {"Ὓ", "Ὺ"},
    {"Ὗ", "Υ"},
    {"Ὡ", "Ω"},
    {"Ὠ", "Ω"},
    {"ᾩ", "ῼ"},
    {"ᾨ", "ῼ"},
    {"Ὥ", "Ώ"},
    {"Ὤ", "Ώ"},
    {"ᾭ", "ῼ"},
    {"ᾬ", "ῼ"},
    {"Ὣ", "Ὼ"},
    {"Ὢ", "Ὼ"},
    {"ᾫ", "ῼ"},
    {"ᾪ", "ῼ"},
    {"Ὧ", "Ω"},
    {"Ὦ", "Ω"},
    {"ᾯ", "ῼ"},
    {"ᾮ", "ῼ"},
    {"0", "0"}
};

namespace bdata = boost::unit_test::data;

BOOST_TEST_DONT_PRINT_LOG_VALUE(fixture_t)

BOOST_DATA_TEST_CASE(
    test_without_breath,
    bdata::make(fixtures),
    arg)
{
    using cxxplgr::secondary::without_breath;

    std::string input = arg.first;
    std::string expected = arg.second;
    std::string actual = without_breath(input);

    BOOST_TEST(actual == expected);
}

